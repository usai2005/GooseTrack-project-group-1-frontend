{"version":3,"file":"static/js/776.d699c87c.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.jsx","components/Statistics/StatisticsComp.styled.jsx","components/Statistics/StatisticsComp.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","components/Statistics/StatisticsInfo.styled.jsx","components/Statistics/StatisticsInfo.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n//// Date picker\n\nexport const DatePickerWrapper = styled.div`\n  font-family: 'Inter', sans-serif;\n  margin-right: 8px;\n  & .react-datepicker__today-button {\n    border: none;\n    background: none;\n  }\n  & input {\n    display: inline;\n\n    text-align: center;\n    padding: 0;\n    background-color: #3e85f3;\n    outline: none;\n    border: none;\n    border-radius: 8px;\n    height: 30px;\n\n    width: 140px; ///\n\n    color: white;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: calc(14 / 18);\n  }\n  & .react-datepicker {\n    background-color: #3e85f3;\n    color: white;\n    border-radius: 16px;\n  }\n  & .react-datepicker__header {\n    background-color: #3e85f3;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__triangle::after,\n  & .react-datepicker__triangle::before {\n    background-color: #3e85f3;\n    display: none;\n  }\n  & .react-datepicker__current-month {\n    font-size: 16px;\n    margin-bottom: 18px;\n  }\n  & .react-datepicker__day-name,\n  & .react-datepicker__day.react-datepicker__day--outside-month {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  & .react-datepicker__navigation-icon::before {\n    border-color: white;\n  }\n  & .react-datepicker__current-month {\n    color: white;\n  }\n  & .react-datepicker__week:last-of-type {\n    margin-bottom: 0;\n  }\n  & .react-datepicker__week:not(:last-of-type) {\n    margin-bottom: 7px;\n  }\n  & .react-datepicker__day.react-datepicker__day--selected {\n    border-radius: 50%;\n    color: #3e85f3;\n\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__day.react-datepicker__day--today {\n    background-color: #fff;\n    border-radius: 50%;\n    color: #3e85f3;\n    font-weight: 500;\n  }\n  & .react-datepicker__day--keyboard-selected {\n    border: none;\n    background: none;\n  }\n  & .react-datepicker__day {\n    color: inherit;\n    font-size: 14px;\n  }\n`;\nexport const ControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n`;\n\nexport const Controls = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 30px;\n  background-color: ${props => props.theme.variable.CalendarLinkColor};\n  border: ${props => props.theme.variable.borderColorWeekCalendar};\n  color: ${props => props.theme.variable.calendarTextColor};\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right-width: 0.5px;\n  }\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left-width: 0.5px;\n  }\n`;\n","import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addDays,\n  addMonths,\n  format,\n  parse,\n  subDays,\n  subMonths,\n} from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport {\n  ControlWrapper,\n  DatePickerWrapper,\n} from 'components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled';\nimport { Controls } from './PeriodPaginator.styled';\n\nimport {\n  selectActiveDate,\n  selectPeriodType,\n  selectSelectedDate,\n} from 'redux/date/selectors';\nimport {\n  useEffect,\n  // useRef\n} from 'react';\nimport { fetchTasks } from 'redux/tasks/tasksOperations';\nimport { setActiveDate, setSelectedDate } from 'redux/date/dateSlice';\n// import { useParams } from 'react-router-dom';\n\nexport const PeriodPaginator = () => {\n  const dispatch = useDispatch();\n\n  const periodType = useSelector(selectPeriodType);\n  const currentDate = useSelector(selectActiveDate);\n  const selectedDate = useSelector(selectSelectedDate);\n\n  // const prevDateRef = useRef(parse(currentDate, 'yyyy-MM-dd', new Date()));\n  // console.log(prevDateRef, 'prevDateRef-11');\n  const date =\n    periodType === 'month'\n      ? parse(currentDate, 'yyyy-MM-dd', new Date())\n      : parse(selectedDate, 'yyyy-MM-dd', new Date());\n\n  useEffect(() => {\n    // if (format(date, 'yyyy-MM') !== format(prevDateRef.current, 'yyyy-MM')) {\n    dispatch(fetchTasks(format(date, 'yyyy-MM')));\n    // }\n  }, [dispatch, date, currentDate]);\n\n  // useEffect(() => {\n  //   prevDateRef.current = parse(currentDate, 'yyyy-MM-dd', new Date());\n  // }, [currentDate]);\n\n  return (\n    <>\n      <ControlWrapper>\n        <DatePickerWrapper>\n          <ReactDatePicker\n            selected={date}\n            onChange={value => {\n              dispatch(setSelectedDate(format(value, 'yyyy-MM-dd')));\n              dispatch(setActiveDate(format(value, 'yyyy-MM-dd')));\n            }}\n            calendarStartDay={1}\n            // showMonthYearPicker\n            dateFormat={periodType === 'month' ? 'MMMM yyyy' : 'dd MMMM yyyy'}\n            closeOnScroll={true}\n            formatWeekDay={nameOfDay => nameOfDay.substr(0, 1)}\n            // minDate={'02-01-2020'}\n            todayButton=\"Today\"\n          />\n        </DatePickerWrapper>\n        <div>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                dispatch(\n                  setActiveDate(format(subMonths(date, 1), 'yyyy-MM-dd'))\n                );\n              } else {\n                dispatch(\n                  setSelectedDate(format(subDays(date, 1), 'yyyy-MM-dd'))\n                );\n              }\n            }}\n          >\n            <AiOutlineLeft />\n          </Controls>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                dispatch(\n                  setActiveDate(format(addMonths(date, 1), 'yyyy-MM-dd'))\n                );\n              } else {\n                dispatch(\n                  setSelectedDate(format(addDays(date, 1), 'yyyy-MM-dd'))\n                );\n              }\n            }}\n          >\n            <AiOutlineRight />\n          </Controls>\n        </div>\n      </ControlWrapper>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst viewport = {\n  mob: '@media screen and (max-width: 767px)',\n  tab: '@media screen and (min-width: 768px)',\n  desk: '@media screen and (min-width: 1440px)',\n};\n\nexport const Container = styled.div`\n  border: solid 1px #E3F3FF;\n  margin-right: auto;\n  margin-left: auto;\n  border-radius: 20px;\n  padding: 40px 14px;\n  ${viewport.mob} {\n    width: 307px;\n    height: 413px;\n  }\n  ${viewport.tab} {\n    width: 640px;\n    height: 424px;\n    border-radius: 29px;\n    padding: 32px 32px;\n  }\n  ${viewport.desk} {\n    width: 860px;\n    height: 440px;\n    padding: 40px 40px;\n  }\n`;\n\nexport const Title = styled.div`\ncolor: #343434;\nfont-size: 14px;\nfont-weight: 600;\nline-height: 150%;\nmargin: 0;\n`;\n\nexport const Wrapper = styled.div`\n${viewport.mob} {\n  width: 279px;\n  height: 333px;\n}\n${viewport.tab} {\n  width: 576px;\n  height: 360px;\n}\n${viewport.desk} {\n  width: 780px;\n  height: 360px;\n}\n`;\n\n\n","import React, { useEffect }  from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllTasks } from '../../redux/tasks/tasksOperations';\nimport { selectTasks } from '../../redux/tasks/tasksSelectors';\nimport { selectSelectedDate } from '../../redux/date/selectors';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LabelList,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { Container, Title, Wrapper } from './StatisticsComp.styled';\n\nexport const StatisticsComp = () => {\n  const dispatch = useDispatch();\n  const toDay = useSelector(selectSelectedDate);\n  const tasks = useSelector(selectTasks);\n\n  useEffect(() => {\n    dispatch(getAllTasks());\n  }, [dispatch]);\n\n  let filteredTasksByDay = null;\n  let filteredTasksByMonth = null;\n  let todoByDay = 0;\n  let inprogressByDay = 0;\n  let doneByDay = 0;\n  let todoByMonth = 0;\n  let inprogressByMonth = 0;\n  let doneByMonth = 0;\n\n  function filteredTasks(tasks) {\n    filteredTasksByDay = tasks.filter(\n      task => new Date(task.date).getDate() === new Date(toDay).getDate()\n    );\n    filteredTasksByMonth = tasks.filter(\n      task => new Date(task.date).getMonth() === new Date(toDay).getMonth()\n    );\n    todoByDay = filteredTasksByDay.filter(\n      task => task.category === 'to-do'\n    ).length;\n    inprogressByDay = filteredTasksByDay.filter(\n      task => task.category === 'in-progress'\n    ).length;\n    doneByDay = filteredTasksByDay.filter(\n      task => task.category === 'done'\n    ).length;\n    todoByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'to-do'\n    ).length;\n    inprogressByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'in-progress'\n    ).length;\n    doneByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'done'\n    ).length;\n  }\n  filteredTasks(tasks);\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n  const allTasksByMonth = todoByMonth + inprogressByMonth + doneByMonth;\n\n  console.log(tasks)\n\n  const data = [\n    {\n      name: 'To Do',\n      day: todoByDay,\n      month: todoByMonth,\n      dayf: `${Math.round((todoByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${Math.round((todoByMonth / allTasksByMonth) * 100) || 0}%`,\n    },\n    {\n      name: 'In Progress',\n      day: inprogressByDay,\n      month: inprogressByMonth,\n      dayf: `${Math.round((inprogressByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${Math.round((inprogressByMonth / allTasksByMonth) * 100) || 0}%`,\n    },\n    {\n      name: 'Done',\n      day: doneByDay,\n      month: doneByMonth,\n      dayf: `${Math.round((doneByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${Math.round((doneByMonth / allTasksByMonth) * 100) || 0}%`,\n    },\n  ];\n\n  return (\n    <Container>\n      <Title>Tasks</Title>\n      <Wrapper>\n        <ResponsiveContainer>\n          <BarChart\n            data={data}\n            margin={{ top: 24, right: 10, left: 10, bottom: 10 }}\n            barGap={14}\n          >\n            <defs>\n              <linearGradient id=\"colorDay\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0} />\n                <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={0.8} />\n              </linearGradient>\n              <linearGradient id=\"colorMonth\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0} />\n                <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={0.8} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n            <XAxis\n              dataKey=\"name\"\n              axisLine={false}\n              tickLine={false}\n              height={40}\n            />\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              width={40}\n              allowDecimals={false}\n              tickMargin={20}\n            />\n            <Tooltip />\n            <Bar dataKey=\"day\" fill=\"url(#colorDay)\" barSize={27}>\n              <LabelList dataKey=\"dayf\" position=\"top\" />\n            </Bar>\n            <Bar dataKey=\"month\" fill=\"url(#colorMonth)\" barSize={27}>\n              <LabelList dataKey=\"monthf\" position=\"top\" />\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </Wrapper>\n    </Container>\n  );\n};\n\n//-------------------------------------------------------------------\n\n// import React, { useEffect }  from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { getAllTasks } from '../../redux/tasks/tasksOperations';\n// import { selectTasks } from '../../redux/tasks/tasksSelectors';\n// import { selectActiveDate } from '../../redux/date/selectors';\n// import {\n//   BarChart,\n//   Bar,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   LabelList,\n//   ResponsiveContainer,\n// } from 'recharts';\n\n// import { Container, Title, Wrapper } from './StatisticsComp.styled';\n\n// export const StatisticsComp = () => {\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     dispatch(getAllTasks());\n//   }, [dispatch]);\n\n//   const toDay = useSelector(selectActiveDate);\n//   const tasksByMonth = useSelector(selectTasks);\n\n//   console.log(\"tasksByMonth\", tasksByMonth)\n//   console.log(\"toDay\", toDay)\n\n//   const tasksByDay = tasksByMonth.filter(task => task.date === toDay);\n\n//   const allTasksByDay = tasksByDay.length;\n//   const allTasksByMonth = tasksByMonth.length;\n//   const todoByDay = tasksByDay.filter(task => task.category === 'to-do').length;\n//   const inprogressByDay = tasksByDay.filter(\n//     task => task.category === 'in-progress'\n//   ).length;\n//   const doneByDay = tasksByDay.filter(task => task.category === 'done').length;\n//   const todoByMonth = tasksByMonth.filter(\n//     task => task.category === 'to-do'\n//   ).length;\n//   const inprogressByMonth = tasksByMonth.filter(\n//     task => task.category === 'in-progress'\n//   ).length;\n//   const doneByMonth = tasksByMonth.filter(\n//     task => task.category === 'done'\n//   ).length;\n\n//   const data = [\n//     {\n//       name: 'To Do',\n//       day: todoByDay,\n//       month: todoByMonth,\n//       dayf: `${Math.round((todoByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((todoByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//     {\n//       name: 'In Progress',\n//       day: inprogressByDay,\n//       month: inprogressByMonth,\n//       dayf: `${Math.round((inprogressByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((inprogressByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//     {\n//       name: 'Done',\n//       day: doneByDay,\n//       month: doneByMonth,\n//       dayf: `${Math.round((doneByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((doneByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//   ];\n\n//   return (\n//     <Container>\n//       <Title>Tasks</Title>\n//       <Wrapper>\n//         <ResponsiveContainer>\n//           <BarChart\n//             data={data}\n//             margin={{ top: 24, right: 10, left: 10, bottom: 10 }}\n//             barGap={14}\n//           >\n//             <defs>\n//               <linearGradient id=\"colorDay\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n//                 <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0} />\n//                 <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={0.8} />\n//               </linearGradient>\n//               <linearGradient id=\"colorMonth\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n//                 <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0} />\n//                 <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={0.8} />\n//               </linearGradient>\n//             </defs>\n//             <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n//             <XAxis\n//               dataKey=\"name\"\n//               axisLine={false}\n//               tickLine={false}\n//               height={40}\n//             />\n//             <YAxis\n//               axisLine={false}\n//               tickLine={false}\n//               width={40}\n//               allowDecimals={false}\n//               tickMargin={20}\n//             />\n//             <Tooltip />\n//             <Bar dataKey=\"day\" fill=\"url(#colorDay)\" barSize={27}>\n//               <LabelList dataKey=\"dayf\" position=\"top\" />\n//             </Bar>\n//             <Bar dataKey=\"month\" fill=\"url(#colorMonth)\" barSize={27}>\n//               <LabelList dataKey=\"monthf\" position=\"top\" />\n//             </Bar>\n//           </BarChart>\n//         </ResponsiveContainer>\n//       </Wrapper>\n//     </Container>\n//   );\n// };","import styled from 'styled-components';\n\nconst viewport = {\n  tab: '@media screen and (min-width: 768px)',\n  desk: '@media screen and (min-width: 1440px)',\n};\n\nexport const Container = styled.section`\n  border-radius: 16px;\n  margin-top: 30px;\n  max-width: 860px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-bottom: 40px;\n\n  background-color: #fff;\n  ${viewport.tab} {\n    padding-bottom: 224px;\n  }\n  ${viewport.desk} {\n    padding-bottom: 104px;\n  }\n`;\n\nexport const Pagination = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 307px;\n  margin: 0 auto;\n  ${viewport.tab} {\n    flex-direction: row;\n    width: 600px;\n  }\n  ${viewport.desk} {\n    width: 800px;\n  }\n`;\n\nexport const Calendar = styled.div`\n  width: 307px;\n  ${viewport.tab} {\n    width: 220px;\n  }\n`;\n","import styled from 'styled-components';\n\nconst viewport = {\n    tab: '@media screen and (min-width: 768px)',\n    desk: '@media screen and (min-width: 1440px)',\n  };\n\nexport const InfoBox = styled.div`\n  margin-bottom: 40px;\n  width: 100%;\n  ${viewport.tab} {\n    margin-left: auto;\n    margin-top: 6px;\n    width: auto;\n  }\n`;\nexport const InfoList = styled.ul`\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\nexport const InfoItem = styled.li`\n  &:not(:last-child) {\n    margin-right: 20px;\n  }\n`;\nexport const InfoDay = styled.p`\n  color: #343434;\n  font-size: 14px;\n  line-height: 18px;\n  font-weight: 400;\n  margin: 0;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: #ffd2dd;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  ${viewport.tab} {\n    font-size: 16px;\n  }\n`;\n\nexport const InfoMonth = styled.p`\n  color: #343434;\n  font-size: 14px;\n  line-height: 18px;\n  font-weight: 400;\n  margin: 0;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: #3E85F3;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  ${viewport.tab} {\n    font-size: 16px;\n  }\n`;\n","import React from 'react';\nimport {\n  InfoBox,\n  InfoList,\n  InfoItem,\n  InfoDay,\n  InfoMonth,\n} from './StatisticsInfo.styled';\n\nconst StatisticsInfo = () => {\n  return (\n    <InfoBox>\n      <InfoList>\n        <InfoItem>\n          <InfoDay>By Day</InfoDay>\n        </InfoItem>\n        <InfoItem>\n          <InfoMonth>By Month</InfoMonth>\n        </InfoItem>\n      </InfoList>\n    </InfoBox>\n  );\n};\n\nexport default StatisticsInfo;\n","import React from 'react';\nimport { StatisticsComp } from '../../components/Statistics/StatisticsComp';\nimport { Container, Pagination, Calendar } from './StatisticsPage.styled';\nimport { PeriodPaginator } from '../../components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator';\nimport StatisticsBtn from '../../components/Statistics/StatisticsInfo';\n\nconst Statistics = () => {\n  return (\n    <Container>\n      <Pagination>\n        <Calendar>\n        <PeriodPaginator />\n        </Calendar>\n        <StatisticsBtn/>\n      </Pagination>\n      <StatisticsComp />\n    </Container>\n  );\n};\n\nexport default Statistics;\n"],"names":["DatePickerWrapper","styled","_templateObject","_taggedTemplateLiteral","ControlWrapper","_templateObject2","Controls","_templateObject3","props","theme","variable","CalendarLinkColor","borderColorWeekCalendar","calendarTextColor","PeriodPaginator","dispatch","useDispatch","periodType","useSelector","selectPeriodType","currentDate","selectActiveDate","selectedDate","selectSelectedDate","date","parse","Date","useEffect","fetchTasks","format","_jsx","_Fragment","children","_jsxs","ReactDatePicker","selected","onChange","value","setSelectedDate","setActiveDate","calendarStartDay","dateFormat","closeOnScroll","formatWeekDay","nameOfDay","substr","todayButton","type","onClick","subMonths","subDays","AiOutlineLeft","addMonths","addDays","AiOutlineRight","viewport","Container","Title","Wrapper","StatisticsComp","toDay","tasks","selectTasks","getAllTasks","filteredTasksByDay","filteredTasksByMonth","todoByDay","inprogressByDay","doneByDay","todoByMonth","inprogressByMonth","doneByMonth","filter","task","getDate","getMonth","category","length","filteredTasks","allTasksByDay","allTasksByMonth","console","log","data","name","day","month","dayf","concat","Math","round","monthf","ResponsiveContainer","BarChart","margin","top","right","left","bottom","barGap","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","vertical","stroke","XAxis","dataKey","axisLine","tickLine","height","YAxis","width","allowDecimals","tickMargin","Tooltip","Bar","fill","barSize","LabelList","position","Pagination","Calendar","InfoBox","InfoList","InfoItem","InfoDay","_templateObject4","InfoMonth","_templateObject5","StatisticsBtn"],"sourceRoot":""}