{"version":3,"file":"static/js/265.6c4e715f.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/Calendar/CalendarToolBar/CalendarToolBar.styled.jsx","components/Calendar/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n//// Date picker\n\nexport const DatePickerWrapper = styled.div`\n  font-family: 'Inter', sans-serif;\n  margin-right: 8px;\n  & .react-datepicker__today-button {\n    border: none;\n    background: none;\n  }\n  & input {\n    display: inline;\n\n    text-align: center;\n    padding: 0;\n    background-color: #3e85f3;\n    outline: none;\n    border: none;\n    border-radius: 8px;\n    height: 30px;\n\n    width: 140px; ///\n\n    color: white;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: calc(14 / 18);\n  }\n  & .react-datepicker {\n    background-color: #3e85f3;\n    color: white;\n    border-radius: 16px;\n  }\n  & .react-datepicker__header {\n    background-color: #3e85f3;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__triangle::after,\n  & .react-datepicker__triangle::before {\n    background-color: #3e85f3;\n    display: none;\n  }\n  & .react-datepicker__current-month {\n    font-size: 16px;\n    margin-bottom: 18px;\n  }\n  & .react-datepicker__day-name,\n  & .react-datepicker__day.react-datepicker__day--outside-month {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  & .react-datepicker__navigation-icon::before {\n    border-color: white;\n  }\n  & .react-datepicker__current-month {\n    color: white;\n  }\n  & .react-datepicker__week:last-of-type {\n    margin-bottom: 0;\n  }\n  & .react-datepicker__week:not(:last-of-type) {\n    margin-bottom: 7px;\n  }\n  & .react-datepicker__day.react-datepicker__day--selected {\n    border-radius: 50%;\n    color: #3e85f3;\n\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__day.react-datepicker__day--today {\n    background-color: #fff;\n    border-radius: 50%;\n    color: #3e85f3;\n    font-weight: 500;\n  }\n  & .react-datepicker__day--keyboard-selected {\n    border: none;\n    background: none;\n  }\n  & .react-datepicker__day {\n    color: inherit;\n    font-size: 14px;\n  }\n`;\n\nconst viewport = {\n  mob: '@media screen and (max-width: 767px)',\n};\n\nexport const ControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n\n  ${viewport.mob} {\n    margin-bottom: 18px;\n  }\n`;\n\nexport const Controls = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 30px;\n  background-color: ${props => props.theme.variable.CalendarLinkColor};\n  border: ${props => props.theme.variable.borderColorWeekCalendar};\n  color: ${props => props.theme.variable.calendarTextColor};\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.variable.mainBackgroundColor};\n    color: ${({ theme }) => theme.variable.activeArrowColor};\n  }\n\n  @media (min-width: 768px) {\n    width: 38px;\n  }\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right-width: 0.5px;\n  }\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left-width: 0.5px;\n  }\n`;\n","import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addDays,\n  addMonths,\n  format,\n  parse,\n  subDays,\n  subMonths,\n} from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport {\n  ControlWrapper,\n  DatePickerWrapper,\n} from 'components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled';\nimport { Controls } from './PeriodPaginator.styled';\n\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { useEffect, useRef } from 'react';\nimport { fetchTasks } from 'redux/tasks/tasksOperations';\nimport { useNavigate } from 'react-router-dom';\nimport { selectUser } from 'redux/auth/selectors';\n\nexport const PeriodPaginator = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { createdAt } = useSelector(selectUser);\n\n  const periodType = useSelector(selectPeriodType);\n  const currentDate = useSelector(selectActiveDate);\n\n  const prevDateRef = useRef(parse(currentDate, 'yyyy-MM-dd', new Date()));\n  const isDisable = new Date(currentDate) <= new Date(createdAt);\n  const date = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  useEffect(() => {\n    if (format(date, 'yyyy-MM') !== format(prevDateRef.current, 'yyyy-MM')) {\n      dispatch(fetchTasks(format(date, 'yyyy-MM')));\n    }\n  }, [dispatch, date, currentDate]);\n\n  useEffect(() => {\n    prevDateRef.current = parse(currentDate, 'yyyy-MM-dd', new Date());\n  }, [currentDate]);\n\n  return (\n    <>\n      <ControlWrapper>\n        <DatePickerWrapper>\n          <ReactDatePicker\n            selected={date}\n            onChange={value => {\n              if (periodType === 'month') {\n                navigate(`${periodType}/${format(value, 'yyyy-MM-dd')}`, {});\n              } else {\n                navigate(`${periodType}/${format(value, 'yyyy-MM-dd')}`, {});\n              }\n            }}\n            calendarStartDay={1}\n            dateFormat={periodType === 'month' ? 'MMMM yyyy' : 'dd MMM yyyy'}\n            closeOnScroll={true}\n            formatWeekDay={nameOfDay => nameOfDay.substr(0, 1)}\n            todayButton=\"Today\"\n            minDate={new Date(createdAt)}\n          />\n        </DatePickerWrapper>\n        <div>\n          <Controls\n            type=\"button\"\n            disabled={isDisable}\n            onClick={() => {\n              if (periodType === 'month') {\n                navigate(\n                  `${periodType}/${format(subMonths(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              } else {\n                navigate(\n                  `${periodType}/${format(subDays(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              }\n            }}\n          >\n            <AiOutlineLeft />\n          </Controls>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                navigate(\n                  `${periodType}/${format(addMonths(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              } else {\n                navigate(\n                  `${periodType}/${format(addDays(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              }\n            }}\n          >\n            <AiOutlineRight />\n          </Controls>\n        </div>\n      </ControlWrapper>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const MonthToggle = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  //\n  background-color: ${props =>\n    props.$currenttype\n      ? props.theme.variable.activeCalendarLinkColor\n      : props.theme.variable.inactiveCalendarLinkColor};\n  border: none;\n  color: ${props =>\n    props.$currenttype ? props.theme.variable.activeTextColorBtn : '#3e85f3'};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(14 / 18);\n  // margin-bottom: 24px;\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 143, 0.2);\n  }\n\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left: 1px solid rgba(62, 133, 143, 0.2);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setPeriodType } from 'redux/date/dateSlice';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { MonthToggle } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = () => {\n  let navigate = useNavigate();\n\n  const periodType = useSelector(selectPeriodType);\n  const isMonthActive = periodType.includes('month');\n  const isDayActive = periodType.includes('day');\n\n  const currentDate = useSelector(selectActiveDate);\n  const dispatch = useDispatch();\n\n  const handleToggleMonth = () => {\n    dispatch(setPeriodType('month'));\n    navigate(`/calendar/month/${currentDate}`, {});\n  };\n\n  const handleToggleDay = () => {\n    dispatch(setPeriodType('day'));\n\n    navigate(`/calendar/day/${currentDate}`, {});\n  };\n\n  return (\n    <>\n      <div>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={isMonthActive}\n          onClick={handleToggleMonth}\n        >\n          Month\n        </MonthToggle>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={isDayActive}\n          onClick={handleToggleDay}\n        >\n          Day\n        </MonthToggle>\n      </div>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const PeriodWrapper = styled.div`\n  width: 100%;\n  padding-bottom: 24px;\n\n  @media (min-width: 375px) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n","// import { useState } from 'react';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodWrapper } from './CalendarToolBar.styled';\n\nexport default function CalendarToolBar() {\n  return (\n    <PeriodWrapper>\n      <PeriodPaginator />\n      <PeriodTypeSelect />\n    </PeriodWrapper>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  width: 100vw;\n\n  padding: 0 20px 95px 20px;\n\n  @media screen and (min-width: 768px) {\n    padding: 0 32px 64px 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc(100vw - 289px);\n    padding: 0 32px 32px 32px;\n  }\n`;\n","import CalendarToolBar from 'components/Calendar/CalendarToolBar/CalendarToolBar';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet, useNavigate, useParams } from 'react-router-dom';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { PageWrapper } from './CalendarPage.styled';\n\n// import { Container } from 'styles/container';\nimport { format, parseISO } from 'date-fns';\nimport {\n  setActiveDate,\n  setPeriodType,\n  setSelectedDate,\n} from 'redux/date/dateSlice';\n\nexport default function CalendarPage() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const today = useSelector(selectActiveDate);\n  const periodType = useSelector(selectPeriodType);\n\n  const { currentDate } = useParams();\n  const params = useParams();\n  const paramsPeriod = Object.values(params)[0].split('/')[0];\n\n  useEffect(() => {\n    try {\n      const date = format(parseISO(currentDate), 'yyyy-MM-dd');\n\n      // console.log('date', date);\n      // console.log('today', today);\n      if (today !== date) {\n        dispatch(setSelectedDate(date));\n        dispatch(setActiveDate(date));\n      }\n      if (\n        periodType !== paramsPeriod &&\n        (paramsPeriod === 'day' || paramsPeriod === 'month')\n      ) {\n        dispatch(setPeriodType(paramsPeriod));\n      }\n    } catch (error) {\n      navigate(`${periodType}/${today}`, {});\n    }\n  }, [periodType, today, currentDate, navigate, dispatch, paramsPeriod]);\n\n  return (\n    <PageWrapper>\n      <CalendarToolBar />\n      <Outlet />\n    </PageWrapper>\n  );\n}\n"],"names":["DatePickerWrapper","styled","_templateObject","_taggedTemplateLiteral","ControlWrapper","_templateObject2","Controls","_templateObject3","props","theme","variable","CalendarLinkColor","borderColorWeekCalendar","calendarTextColor","_ref","mainBackgroundColor","_ref2","activeArrowColor","PeriodPaginator","dispatch","useDispatch","navigate","useNavigate","createdAt","useSelector","selectUser","periodType","selectPeriodType","currentDate","selectActiveDate","prevDateRef","useRef","parse","Date","isDisable","date","useEffect","format","current","fetchTasks","_jsx","_Fragment","children","_jsxs","ReactDatePicker","selected","onChange","value","concat","calendarStartDay","dateFormat","closeOnScroll","formatWeekDay","nameOfDay","substr","todayButton","minDate","type","disabled","onClick","subMonths","subDays","AiOutlineLeft","addMonths","addDays","AiOutlineRight","MonthToggle","$currenttype","activeCalendarLinkColor","inactiveCalendarLinkColor","activeTextColorBtn","PeriodTypeSelect","isMonthActive","includes","isDayActive","setPeriodType","PeriodWrapper","CalendarToolBar","PageWrapper","CalendarPage","today","useParams","params","paramsPeriod","Object","values","split","parseISO","setSelectedDate","setActiveDate","error","Outlet"],"sourceRoot":""}