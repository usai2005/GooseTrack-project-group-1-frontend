{"version":3,"file":"static/js/363.0e7ed681.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const MonthToggle = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  background-color: ${props => (props.$currenttype ? '#CAE8FF' : '#e3f3ff')};\n  border: none;\n  color: #3e85f3;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(14 / 18);\n  margin-bottom: 24px;\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 143, 0.2);\n  }\n\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left: 1px solid rgba(62, 133, 143, 0.2);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setPeriodType } from 'redux/date/dateSlice';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { MonthToggle } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = () => {\n  let navigate = useNavigate();\n\n  const periodType = useSelector(selectPeriodType);\n\n  const currentDate = useSelector(selectActiveDate);\n  const dispatch = useDispatch();\n\n  const handleToggleMonth = () => {\n    dispatch(setPeriodType('month'));\n    navigate(`/calendar/month/${currentDate}`, {});\n  };\n\n  const handleToggleDay = () => {\n    dispatch(setPeriodType('day'));\n\n    navigate(`/calendar/day/${currentDate}`, {});\n  };\n\n  return (\n    <>\n      <div>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={periodType}\n          onClick={handleToggleMonth}\n        >\n          Month\n        </MonthToggle>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={periodType}\n          onClick={handleToggleDay}\n        >\n          Day\n        </MonthToggle>\n      </div>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n//// Date picker\n\nexport const DatePickerWrapper = styled.div`\n  font-family: 'Inter', sans-serif;\n  & .react-datepicker__today-button {\n    border: none;\n    background: none;\n  }\n  & input {\n    display: inline;\n\n    text-align: center;\n    padding: 0;\n    background-color: #3e85f3;\n    outline: none;\n    border: none;\n    border-radius: 8px;\n    height: 30px;\n\n    width: 140px; ///\n\n    color: white;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: calc(14 / 18);\n  }\n  & .react-datepicker {\n    background-color: #3e85f3;\n    color: white;\n    border-radius: 16px;\n  }\n  & .react-datepicker__header {\n    background-color: #3e85f3;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__triangle::after,\n  & .react-datepicker__triangle::before {\n    background-color: #3e85f3;\n    display: none;\n  }\n  & .react-datepicker__current-month {\n    font-size: 16px;\n    margin-bottom: 18px;\n  }\n  & .react-datepicker__day-name,\n  & .react-datepicker__day.react-datepicker__day--outside-month {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  & .react-datepicker__navigation-icon::before {\n    border-color: white;\n  }\n  & .react-datepicker__current-month {\n    color: white;\n  }\n  & .react-datepicker__week:last-of-type {\n    margin-bottom: 0;\n  }\n  & .react-datepicker__week:not(:last-of-type) {\n    margin-bottom: 7px;\n  }\n  & .react-datepicker__day.react-datepicker__day--selected {\n    border-radius: 50%;\n    color: #3e85f3;\n\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__day.react-datepicker__day--today {\n    background-color: #fff;\n    border-radius: 50%;\n    color: #3e85f3;\n    font-weight: 500;\n  }\n  & .react-datepicker__day--keyboard-selected {\n    border: none;\n    background: none;\n  }\n  & .react-datepicker__day {\n    color: inherit;\n    font-size: 14px;\n  }\n`;\nexport const ControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n`;\n\nexport const Controls = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 30px;\n  background-color: white;\n  border: 1px solid #dce3e5;\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right-width: 0.5px;\n  }\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left-width: 0.5px;\n  }\n`;\n","import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMonths, format, parse, subMonths } from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport {\n  ControlWrapper,\n  DatePickerWrapper,\n} from 'components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled';\nimport { Controls } from './PeriodPaginator.styled';\n\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { useEffect } from 'react';\nimport { fetchTasks } from 'redux/tasks/tasksOperations';\nimport { setActiveDate, setSelectedDate } from 'redux/date/dateSlice';\n// import { useParams } from 'react-router-dom';\n\nexport const PeriodPaginator = () => {\n  const dispatch = useDispatch();\n\n  const periodType = useSelector(selectPeriodType);\n  const currentDate = useSelector(selectActiveDate);\n  const date = parse(currentDate, 'dd-MM-yyyy', new Date());\n\n  // console.log(currentDate);\n  // const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTasks(format(date, 'MM-yyyy')));\n  }, [dispatch, date]);\n\n  return (\n    <>\n      <ControlWrapper>\n        <DatePickerWrapper>\n          <ReactDatePicker\n            selected={date}\n            onChange={value => {\n              dispatch(setSelectedDate(format(value, 'dd-MM-yyyy')));\n              dispatch(setActiveDate(format(value, 'dd-MM-yyyy')));\n            }}\n            calendarStartDay={1}\n            // showMonthYearPicker\n            dateFormat={periodType === 'month' ? 'MMMM yyyy' : 'dd MMMM yyyy'}\n            closeOnScroll={true}\n            formatWeekDay={nameOfDay => nameOfDay.substr(0, 1)}\n            // minDate={'02-01-2020'}\n            todayButton=\"Today\"\n          />\n        </DatePickerWrapper>\n        <div>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              dispatch(setActiveDate(format(subMonths(date, 1), 'dd-MM-yyyy')));\n            }}\n          >\n            <AiOutlineLeft />\n          </Controls>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              dispatch(setActiveDate(format(addMonths(date, 1), 'dd-MM-yyyy')));\n            }}\n          >\n            <AiOutlineRight />\n          </Controls>\n        </div>\n      </ControlWrapper>\n    </>\n  );\n};\n","// import { useState } from 'react';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\n\nexport default function CalendarToolBar() {\n  return (\n    <>\n      <PeriodPaginator />\n      <PeriodTypeSelect />\n    </>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  padding-top: 64px;\n`;\n","import CalendarToolBar from 'components/Calendar/CalendarToolBar/CalendarToolBar';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { PageWrapper } from './CalendarPage.styled';\n\nexport default function CalendarPage() {\n  console.log('Calendar');\n  const navigate = useNavigate();\n  const currentDate = useSelector(selectActiveDate);\n  const periodType = useSelector(selectPeriodType);\n  console.log(periodType, 'lllllll');\n\n  console.log(currentDate, 'calendar redirect date');\n\n  useEffect(() => {\n    navigate(`${periodType}/${currentDate}`, {});\n  }, [currentDate, navigate, periodType]);\n\n  return (\n    <PageWrapper>\n      <CalendarToolBar />\n      <Outlet />\n    </PageWrapper>\n  );\n}\n"],"names":["MonthToggle","styled","_templateObject","_taggedTemplateLiteral","props","$currenttype","PeriodTypeSelect","navigate","useNavigate","periodType","useSelector","selectPeriodType","currentDate","selectActiveDate","dispatch","useDispatch","_jsx","_Fragment","children","_jsxs","type","onClick","setPeriodType","concat","DatePickerWrapper","ControlWrapper","_templateObject2","Controls","_templateObject3","PeriodPaginator","date","parse","Date","useEffect","fetchTasks","format","ReactDatePicker","selected","onChange","value","setSelectedDate","setActiveDate","calendarStartDay","dateFormat","closeOnScroll","formatWeekDay","nameOfDay","substr","todayButton","subMonths","AiOutlineLeft","addMonths","AiOutlineRight","CalendarToolBar","PageWrapper","CalendarPage","console","log","Outlet"],"sourceRoot":""}