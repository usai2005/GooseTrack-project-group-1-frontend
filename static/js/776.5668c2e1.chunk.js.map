{"version":3,"file":"static/js/776.5668c2e1.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.jsx","components/Statistics/StatisticsComp.styled.jsx","components/Statistics/StatisticsComp.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","components/Statistics/StatisticsInfo.styled.jsx","components/Statistics/StatisticsInfo.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n//// Date picker\n\nexport const DatePickerWrapper = styled.div`\n  font-family: 'Inter', sans-serif;\n  margin-right: 8px;\n  & .react-datepicker__today-button {\n    border: none;\n    background: none;\n  }\n  & input {\n    display: inline;\n\n    text-align: center;\n    padding: 0;\n    background-color: #3e85f3;\n    outline: none;\n    border: none;\n    border-radius: 8px;\n    height: 30px;\n\n    width: 140px; ///\n\n    color: white;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: calc(14 / 18);\n  }\n  & .react-datepicker {\n    background-color: #3e85f3;\n    color: white;\n    border-radius: 16px;\n  }\n  & .react-datepicker__header {\n    background-color: #3e85f3;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__triangle::after,\n  & .react-datepicker__triangle::before {\n    background-color: #3e85f3;\n    display: none;\n  }\n  & .react-datepicker__current-month {\n    font-size: 16px;\n    margin-bottom: 18px;\n  }\n  & .react-datepicker__day-name,\n  & .react-datepicker__day.react-datepicker__day--outside-month {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  & .react-datepicker__navigation-icon::before {\n    border-color: white;\n  }\n  & .react-datepicker__current-month {\n    color: white;\n  }\n  & .react-datepicker__week:last-of-type {\n    margin-bottom: 0;\n  }\n  & .react-datepicker__week:not(:last-of-type) {\n    margin-bottom: 7px;\n  }\n  & .react-datepicker__day.react-datepicker__day--selected {\n    border-radius: 50%;\n    color: #3e85f3;\n\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__day.react-datepicker__day--today {\n    background-color: #fff;\n    border-radius: 50%;\n    color: #3e85f3;\n    font-weight: 500;\n  }\n  & .react-datepicker__day--keyboard-selected {\n    border: none;\n    background: none;\n  }\n  & .react-datepicker__day {\n    color: inherit;\n    font-size: 14px;\n  }\n`;\n\nconst viewport = {\n  mob: '@media screen and (max-width: 767px)',\n};\n\nexport const ControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  ${viewport.mob} {\n    margin-bottom: 18px;\n  }\n`;\n\nexport const Controls = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 30px;\n  background-color: ${props => props.theme.variable.CalendarLinkColor};\n  border: ${props => props.theme.variable.borderColorWeekCalendar};\n  color: ${props => props.theme.variable.calendarTextColor};\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.variable.mainBackgroundColor};\n    color: ${({ theme }) => theme.variable.activeArrowColor};\n  }\n\n  @media (min-width: 768px) {\n    width: 38px;\n  }\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right-width: 0.5px;\n  }\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left-width: 0.5px;\n  }\n`;\n","import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addDays,\n  addMonths,\n  format,\n  parse,\n  subDays,\n  subMonths,\n} from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport {\n  ControlWrapper,\n  DatePickerWrapper,\n} from 'components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled';\nimport { Controls } from './PeriodPaginator.styled';\n\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { useEffect, useRef } from 'react';\nimport { fetchTasks } from 'redux/tasks/tasksOperations';\nimport { useNavigate } from 'react-router-dom';\nimport { selectUser } from 'redux/auth/selectors';\n\nexport const PeriodPaginator = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { createdAt } = useSelector(selectUser);\n\n  const periodType = useSelector(selectPeriodType);\n  const currentDate = useSelector(selectActiveDate);\n\n  const prevDateRef = useRef(parse(currentDate, 'yyyy-MM-dd', new Date()));\n  const isDisable = new Date(currentDate) <= new Date(createdAt);\n  const date = parse(currentDate, 'yyyy-MM-dd', new Date());\n\n  useEffect(() => {\n    if (format(date, 'yyyy-MM') !== format(prevDateRef.current, 'yyyy-MM')) {\n      dispatch(fetchTasks(format(date, 'yyyy-MM')));\n    }\n  }, [dispatch, date, currentDate]);\n\n  useEffect(() => {\n    prevDateRef.current = parse(currentDate, 'yyyy-MM-dd', new Date());\n  }, [currentDate]);\n\n  return (\n    <>\n      <ControlWrapper>\n        <DatePickerWrapper>\n          <ReactDatePicker\n            selected={date}\n            onChange={value => {\n              if (periodType === 'month') {\n                navigate(`${periodType}/${format(value, 'yyyy-MM-dd')}`, {});\n              } else {\n                navigate(`${periodType}/${format(value, 'yyyy-MM-dd')}`, {});\n              }\n            }}\n            calendarStartDay={1}\n            dateFormat={periodType === 'month' ? 'MMMM yyyy' : 'dd MMM yyyy'}\n            closeOnScroll={true}\n            formatWeekDay={nameOfDay => nameOfDay.substr(0, 1)}\n            todayButton=\"Today\"\n            minDate={new Date(createdAt)}\n          />\n        </DatePickerWrapper>\n        <div>\n          <Controls\n            type=\"button\"\n            disabled={isDisable}\n            onClick={() => {\n              if (periodType === 'month') {\n                navigate(\n                  `${periodType}/${format(subMonths(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              } else {\n                navigate(\n                  `${periodType}/${format(subDays(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              }\n            }}\n          >\n            <AiOutlineLeft />\n          </Controls>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                navigate(\n                  `${periodType}/${format(addMonths(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              } else {\n                navigate(\n                  `${periodType}/${format(addDays(date, 1), 'yyyy-MM-dd')}`,\n                  {}\n                );\n              }\n            }}\n          >\n            <AiOutlineRight />\n          </Controls>\n        </div>\n      </ControlWrapper>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst viewport = {\n  mob: '@media screen and (max-width: 767px)',\n  tab: '@media screen and (min-width: 768px)',\n  desk: '@media screen and (min-width: 1440px)',\n};\n\nexport const Container = styled.div`\n  border: solid 1px ${props => props.theme.variable.borderColor};\n  stroke: rgba(52, 52, 52, 0.5);\n\n  margin-right: auto;\n  margin-left: auto;\n  border-radius: 20px;\n  padding: 40px 14px;\n  ${viewport.mob} {\n    width: 307px;\n    height: 413px;\n  }\n  ${viewport.tab} {\n    width: 640px;\n    height: 424px;\n    border-radius: 29px;\n    padding: 32px 32px;\n  }\n  ${viewport.desk} {\n    width: 860px;\n    height: 440px;\n    padding: 40px 40px;\n  }\n`;\n\nexport const Title = styled.div`\n  color: ${props => props.theme.variable.titleAvatar};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 150%;\n  margin: 0;\n`;\n\nexport const Wrapper = styled.div`\n  ${viewport.mob} {\n    width: 279px;\n    height: 333px;\n  }\n  ${viewport.tab} {\n    width: 576px;\n    height: 360px;\n  }\n  ${viewport.desk} {\n    width: 780px;\n    height: 360px;\n  }\n`;\n\nexport const LabelContainer = styled.div`\n  color: ${props => props.theme.variable.text};\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\nexport const LabelTitle = styled.p`\n  color: ${props => props.theme.variable.activeTextColorBtn};\n  font-family: InterMedium;\n  font-size: 16px;\n  font-style: italic;\n  line-height: 150%;\n  margin: 0;\n`;\n","// import React, { useEffect } from 'react';\nimport {\n  useSelector,\n  // useDispatch\n} from 'react-redux';\n// import { getAllTasks } from '../../redux/tasks/tasksOperations';\nimport { selectTasks } from '../../redux/tasks/tasksSelectors';\nimport { selectSelectedDate } from '../../redux/date/selectors';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LabelList,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport {\n  Container,\n  LabelContainer,\n  LabelTitle,\n  Title,\n  Wrapper,\n} from './StatisticsComp.styled';\nimport { selectCurrentTheme } from 'redux/theme/themeSelectors';\n\nconst CustomTooltip = ({ active, payload, label, x, y }) => {\n  if (active && payload && payload.length) {\n    return (\n      <LabelContainer className=\"custom-tooltip\">\n        <LabelTitle className=\"label\">{`All tasks for the ${payload[0].name}: ${payload[0].value}`}</LabelTitle>\n        <LabelTitle className=\"label\">{`All tasks for a ${payload[1].name}: ${payload[1].value}`}</LabelTitle>\n      </LabelContainer>\n    );\n  }\n  return null;\n};\n\nexport const StatisticsComp = () => {\n  const theme = useSelector(selectCurrentTheme);\n  // console.log(theme);\n  // const dispatch = useDispatch();\n  const toDay = useSelector(selectSelectedDate);\n  const tasks = useSelector(selectTasks);\n\n  // useEffect(() => {\n  //   dispatch(getAllTasks());\n  // }, [dispatch]);\n\n  let filteredTasksByDay = null;\n  let filteredTasksByMonth = null;\n  let todoByDay = 0;\n  let inprogressByDay = 0;\n  let doneByDay = 0;\n  let todoByMonth = 0;\n  let inprogressByMonth = 0;\n  let doneByMonth = 0;\n\n  function filteredTasks(tasks) {\n    filteredTasksByDay = tasks.filter(\n      task => new Date(task.date).getDate() === new Date(toDay).getDate()\n    );\n    filteredTasksByMonth = tasks.filter(\n      task => new Date(task.date).getMonth() === new Date(toDay).getMonth()\n    );\n    todoByDay = filteredTasksByDay.filter(\n      task => task.category === 'to-do'\n    ).length;\n    inprogressByDay = filteredTasksByDay.filter(\n      task => task.category === 'in-progress'\n    ).length;\n    doneByDay = filteredTasksByDay.filter(\n      task => task.category === 'done'\n    ).length;\n    todoByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'to-do'\n    ).length;\n    inprogressByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'in-progress'\n    ).length;\n    doneByMonth = filteredTasksByMonth.filter(\n      task => task.category === 'done'\n    ).length;\n  }\n  filteredTasks(tasks);\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n  const allTasksByMonth = todoByMonth + inprogressByMonth + doneByMonth;\n\n  // console.log(tasks)\n\n  const data = [\n    {\n      name: 'To Do',\n      percentage: '100',\n      day: todoByDay,\n      month: todoByMonth,\n      dayf: `${Math.round((todoByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${Math.round((todoByMonth / allTasksByMonth) * 100) || 0}%`,\n    },\n    {\n      name: 'In Progress',\n      percentage: '100',\n      day: inprogressByDay,\n      month: inprogressByMonth,\n      dayf: `${Math.round((inprogressByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${\n        Math.round((inprogressByMonth / allTasksByMonth) * 100) || 0\n      }%`,\n    },\n    {\n      name: 'Done',\n      percentage: '100',\n      day: doneByDay,\n      month: doneByMonth,\n      dayf: `${Math.round((doneByDay / allTasksByDay) * 100) || 0}%`,\n      monthf: `${Math.round((doneByMonth / allTasksByMonth) * 100) || 0}%`,\n    },\n  ];\n\n  return (\n    <Container>\n      <Title>Tasks</Title>\n      <Wrapper>\n        <ResponsiveContainer>\n          <BarChart\n            data={data}\n            margin={{ top: 24, right: 10, left: 10, bottom: 10 }}\n            barGap={14}\n          >\n            <defs>\n              <linearGradient id=\"colorDay\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0} />\n                <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={0.8} />\n              </linearGradient>\n              <linearGradient id=\"colorMonth\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0} />\n                <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={0.8} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid\n              vertical={false}\n              style={{\n                stroke:\n                  theme === 'light' ? '#E3F3FF' : 'rgba(227, 243, 255, 0.15)',\n              }}\n            />\n            <XAxis\n              stroke={theme === 'light' ? '#343434' : '#fff'}\n              dataKey=\"name\"\n              axisLine={false}\n              tickLine={false}\n              height={40}\n            />\n            <YAxis\n              stroke={theme === 'light' ? '#343434' : '#fff'}\n              dataKey=\"percentage\"\n              axisLine={false}\n              tickLine={false}\n              width={40}\n              allowDecimals={false}\n              tickMargin={20}\n            />\n            <Tooltip cursor={false} content={<CustomTooltip />} />\n            <Bar dataKey=\"day\" fill=\"url(#colorDay)\" barSize={27}>\n              <LabelList\n                stroke={theme === 'light' ? '#343434' : '#fff'}\n                dataKey=\"dayf\"\n                position=\"top\"\n              />\n            </Bar>\n            <Bar dataKey=\"month\" fill=\"url(#colorMonth)\" barSize={27}>\n              <LabelList\n                stroke={theme === 'light' ? '#343434' : '#fff'}\n                dataKey=\"monthf\"\n                position=\"top\"\n              />\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </Wrapper>\n    </Container>\n  );\n};\n\n//-------------------------------------------------------------------\n\n// import React, { useEffect }  from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { getAllTasks } from '../../redux/tasks/tasksOperations';\n// import { selectTasks } from '../../redux/tasks/tasksSelectors';\n// import { selectActiveDate } from '../../redux/date/selectors';\n// import {\n//   BarChart,\n//   Bar,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   LabelList,\n//   ResponsiveContainer,\n// } from 'recharts';\n\n// import { Container, Title, Wrapper } from './StatisticsComp.styled';\n\n// export const StatisticsComp = () => {\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     dispatch(getAllTasks());\n//   }, [dispatch]);\n\n//   const toDay = useSelector(selectActiveDate);\n//   const tasksByMonth = useSelector(selectTasks);\n\n//   console.log(\"tasksByMonth\", tasksByMonth)\n//   console.log(\"toDay\", toDay)\n\n//   const tasksByDay = tasksByMonth.filter(task => task.date === toDay);\n\n//   const allTasksByDay = tasksByDay.length;\n//   const allTasksByMonth = tasksByMonth.length;\n//   const todoByDay = tasksByDay.filter(task => task.category === 'to-do').length;\n//   const inprogressByDay = tasksByDay.filter(\n//     task => task.category === 'in-progress'\n//   ).length;\n//   const doneByDay = tasksByDay.filter(task => task.category === 'done').length;\n//   const todoByMonth = tasksByMonth.filter(\n//     task => task.category === 'to-do'\n//   ).length;\n//   const inprogressByMonth = tasksByMonth.filter(\n//     task => task.category === 'in-progress'\n//   ).length;\n//   const doneByMonth = tasksByMonth.filter(\n//     task => task.category === 'done'\n//   ).length;\n\n//   const data = [\n//     {\n//       name: 'To Do',\n//       day: todoByDay,\n//       month: todoByMonth,\n//       dayf: `${Math.round((todoByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((todoByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//     {\n//       name: 'In Progress',\n//       day: inprogressByDay,\n//       month: inprogressByMonth,\n//       dayf: `${Math.round((inprogressByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((inprogressByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//     {\n//       name: 'Done',\n//       day: doneByDay,\n//       month: doneByMonth,\n//       dayf: `${Math.round((doneByDay / allTasksByDay) * 100) || 0}%`,\n//       monthf: `${Math.round((doneByMonth / allTasksByMonth) * 100) || 0}%`,\n//     },\n//   ];\n\n//   return (\n//     <Container>\n//       <Title>Tasks</Title>\n//       <Wrapper>\n//         <ResponsiveContainer>\n//           <BarChart\n//             data={data}\n//             margin={{ top: 24, right: 10, left: 10, bottom: 10 }}\n//             barGap={14}\n//           >\n//             <defs>\n//               <linearGradient id=\"colorDay\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n//                 <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0} />\n//                 <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={0.8} />\n//               </linearGradient>\n//               <linearGradient id=\"colorMonth\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n//                 <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0} />\n//                 <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={0.8} />\n//               </linearGradient>\n//             </defs>\n//             <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n//             <XAxis\n//               dataKey=\"name\"\n//               axisLine={false}\n//               tickLine={false}\n//               height={40}\n//             />\n//             <YAxis\n//               axisLine={false}\n//               tickLine={false}\n//               width={40}\n//               allowDecimals={false}\n//               tickMargin={20}\n//             />\n//             <Tooltip />\n//             <Bar dataKey=\"day\" fill=\"url(#colorDay)\" barSize={27}>\n//               <LabelList dataKey=\"dayf\" position=\"top\" />\n//             </Bar>\n//             <Bar dataKey=\"month\" fill=\"url(#colorMonth)\" barSize={27}>\n//               <LabelList dataKey=\"monthf\" position=\"top\" />\n//             </Bar>\n//           </BarChart>\n//         </ResponsiveContainer>\n//       </Wrapper>\n//     </Container>\n//   );\n// };\n","import styled from 'styled-components';\n\nconst viewport = {\n  tab: '@media screen and (min-width: 768px)',\n  desk: '@media screen and (min-width: 1440px)',\n};\n\nexport const PageWrapper = styled.div`\n\n  padding: 0 20px 95px 20px;\n\n  ${viewport.tab} {\n    padding: 0 32px 64px 32px;\n  }\n\n  ${viewport.desk} {\n    padding: 0 32px 32px 32px;\n  }\n`;\n\nexport const StatisticWrapper = styled.div`\n  background-color: ${props => props.theme.variable.secondaryBg};\n  border-radius: 16px;\n\n  padding: 28px 14px 135px 14px;\n\n  ${viewport.tab} {\n    padding: 132px 32px 224px 32px;\n  }\n\n  ${viewport.desk} {\n    padding: 134px 113px 104px 113px;\n  }\n`;\n\nexport const Pagination = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 307px;\n  margin: 0 auto;\n  ${viewport.tab} {\n    flex-direction: row;\n    width: 600px;\n  }\n  ${viewport.desk} {\n    width: 800px;\n  }\n`;\n\nexport const Calendar = styled.div`\n  width: 307px;\n  ${viewport.tab} {\n    width: 230px;\n  }\n`;\n","import styled from 'styled-components';\n\nconst viewport = {\n  tab: '@media screen and (min-width: 768px)',\n  desk: '@media screen and (min-width: 1440px)',\n};\n\nexport const InfoBox = styled.div`\n  background-color: ${props => props.theme.variable.bgStatistic};\n  margin-bottom: 40px;\n  width: 100%;\n  ${viewport.tab} {\n    margin-left: auto;\n    margin-top: 6px;\n    width: auto;\n  }\n`;\nexport const InfoList = styled.ul`\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\nexport const InfoItem = styled.li`\n  &:not(:last-child) {\n    margin-right: 20px;\n  }\n`;\nexport const InfoDay = styled.p`\n  color: ${props => props.theme.variable.titleAvatar};\n  font-size: 14px;\n  line-height: 18px;\n  font-weight: 400;\n  margin: 0;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: #ffd2dd;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  ${viewport.tab} {\n    font-size: 16px;\n  }\n`;\n\nexport const InfoMonth = styled.p`\n  color: ${props => props.theme.variable.titleAvatar};\n  font-size: 14px;\n  line-height: 18px;\n  font-weight: 400;\n  margin: 0;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: #3e85f3;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  ${viewport.tab} {\n    font-size: 16px;\n  }\n`;\n","import React from 'react';\nimport {\n  InfoBox,\n  InfoList,\n  InfoItem,\n  InfoDay,\n  InfoMonth,\n} from './StatisticsInfo.styled';\n\nconst StatisticsInfo = () => {\n  return (\n    <InfoBox>\n      <InfoList>\n        <InfoItem>\n          <InfoDay>By Day</InfoDay>\n        </InfoItem>\n        <InfoItem>\n          <InfoMonth>By Month</InfoMonth>\n        </InfoItem>\n      </InfoList>\n    </InfoBox>\n  );\n};\n\nexport default StatisticsInfo;\n","import React, { useEffect } from 'react';\nimport { StatisticsComp } from '../../components/Statistics/StatisticsComp';\nimport {\n  Pagination,\n  Calendar,\n  PageWrapper,\n  StatisticWrapper,\n} from './StatisticsPage.styled';\nimport { PeriodPaginator } from '../../components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator';\nimport StatisticsBtn from '../../components/Statistics/StatisticsInfo';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { format, parseISO } from 'date-fns';\nimport {\n  setActiveDate,\n  setPeriodType,\n  setSelectedDate,\n} from 'redux/date/dateSlice';\n\nconst Statistics = () => {\n  //компонент отримує дату і тип періоду із параментів Url, валідує і записує в стейт, після чого робить перехід,\n  //якщо параметри відсутні, або не валідні, переходить на дату зі стейту\n  // статистика щоденна\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const today = useSelector(selectActiveDate);\n  const periodType = useSelector(selectPeriodType);\n\n  const currentDate = useParams();\n  const normalizedDate = Object.values(currentDate)[0].split('/')[1];\n\n  useEffect(() => {\n    if (periodType === 'month') {\n      dispatch(setPeriodType('day'));\n    }\n\n    try {\n      const date = format(parseISO(normalizedDate), 'yyyy-MM-dd');\n\n      if (today !== date) {\n        dispatch(setSelectedDate(date));\n        dispatch(setActiveDate(date));\n      }\n    } catch (error) {\n      navigate(`${periodType}/${today}`, {});\n    }\n  }, [periodType, today, normalizedDate, navigate, dispatch]);\n  return (\n    <PageWrapper>\n      <StatisticWrapper>\n        <Pagination>\n          <Calendar>\n            <PeriodPaginator />\n          </Calendar>\n          <StatisticsBtn />\n        </Pagination>\n        <StatisticsComp />\n      </StatisticWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default Statistics;\n"],"names":["DatePickerWrapper","styled","_templateObject","_taggedTemplateLiteral","ControlWrapper","_templateObject2","Controls","_templateObject3","props","theme","variable","CalendarLinkColor","borderColorWeekCalendar","calendarTextColor","_ref","mainBackgroundColor","_ref2","activeArrowColor","PeriodPaginator","dispatch","useDispatch","navigate","useNavigate","createdAt","useSelector","selectUser","periodType","selectPeriodType","currentDate","selectActiveDate","prevDateRef","useRef","parse","Date","isDisable","date","useEffect","format","current","fetchTasks","_jsx","_Fragment","children","_jsxs","ReactDatePicker","selected","onChange","value","concat","calendarStartDay","dateFormat","closeOnScroll","formatWeekDay","nameOfDay","substr","todayButton","minDate","type","disabled","onClick","subMonths","subDays","AiOutlineLeft","addMonths","addDays","AiOutlineRight","viewport","Container","borderColor","Title","titleAvatar","Wrapper","LabelContainer","_templateObject4","text","LabelTitle","_templateObject5","activeTextColorBtn","CustomTooltip","active","payload","label","x","y","length","className","name","StatisticsComp","selectCurrentTheme","toDay","selectSelectedDate","tasks","selectTasks","filteredTasksByDay","filteredTasksByMonth","todoByDay","inprogressByDay","doneByDay","todoByMonth","inprogressByMonth","doneByMonth","filter","task","getDate","getMonth","category","filteredTasks","allTasksByDay","allTasksByMonth","data","percentage","day","month","dayf","Math","round","monthf","ResponsiveContainer","BarChart","margin","top","right","left","bottom","barGap","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","vertical","style","stroke","XAxis","dataKey","axisLine","tickLine","height","YAxis","width","allowDecimals","tickMargin","Tooltip","cursor","content","Bar","fill","barSize","LabelList","position","PageWrapper","StatisticWrapper","secondaryBg","Pagination","Calendar","InfoBox","bgStatistic","InfoList","InfoItem","InfoDay","InfoMonth","today","useParams","normalizedDate","Object","values","split","setPeriodType","parseISO","setSelectedDate","setActiveDate","error","StatisticsBtn"],"sourceRoot":""}