{"version":3,"file":"static/js/265.36006cf1.chunk.js","mappings":"yUAGaA,EAAoBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,47DAoF9BC,EAAiBH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uFAM3BG,EAAWL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qbAMf,SAAAK,GAAK,OAAIA,EAAMC,MAAMC,SAASC,iBAAiB,IACzD,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,SAASE,uBAAuB,IACtD,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,SAASG,iBAAiB,I,iDCrE7CC,EAAkB,WAC7B,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAeJ,EAAAA,EAAAA,IAAYK,EAAAA,IAI3BC,EACW,UAAfP,GACIQ,EAAAA,EAAAA,SAAML,EAAa,aAAc,IAAIM,OACrCD,EAAAA,EAAAA,SAAMH,EAAc,aAAc,IAAII,MAY5C,OAVAC,EAAAA,EAAAA,YAAU,WAERZ,GAASa,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,SAAOL,EAAM,YAEnC,GAAG,CAACT,EAAUS,EAAMJ,KAOlBU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAC7B,EAAc,CAAA4B,SAAA,EACbF,EAAAA,EAAAA,KAAC9B,EAAiB,CAAAgC,UAChBF,EAAAA,EAAAA,KAACI,IAAe,CACdC,SAAUX,EACVY,SAAU,SAAAC,GACRtB,GAASuB,EAAAA,EAAAA,KAAgBT,EAAAA,EAAAA,SAAOQ,EAAO,gBACvCtB,GAASwB,EAAAA,EAAAA,KAAcV,EAAAA,EAAAA,SAAOQ,EAAO,eACvC,EACAG,iBAAkB,EAElBC,WAA2B,UAAfxB,EAAyB,YAAc,eACnDyB,eAAe,EACfC,cAAe,SAAAC,GAAS,OAAIA,EAAUC,OAAO,EAAG,EAAE,EAElDC,YAAY,aAGhBb,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACxB,EAAQ,CACPyC,KAAK,SACLC,QAAS,WAELjC,EADiB,UAAfE,GAEAsB,EAAAA,EAAAA,KAAcV,EAAAA,EAAAA,UAAOoB,EAAAA,EAAAA,SAAUzB,EAAM,GAAI,gBAIzCc,EAAAA,EAAAA,KAAgBT,EAAAA,EAAAA,UAAOqB,EAAAA,EAAAA,SAAQ1B,EAAM,GAAI,eAG/C,EAAEQ,UAEFF,EAAAA,EAAAA,KAACqB,EAAAA,IAAa,OAEhBrB,EAAAA,EAAAA,KAACxB,EAAQ,CACPyC,KAAK,SACLC,QAAS,WAELjC,EADiB,UAAfE,GAEAsB,EAAAA,EAAAA,KAAcV,EAAAA,EAAAA,UAAOuB,EAAAA,EAAAA,SAAU5B,EAAM,GAAI,gBAIzCc,EAAAA,EAAAA,KAAgBT,EAAAA,EAAAA,UAAOwB,EAAAA,EAAAA,SAAQ7B,EAAM,GAAI,eAG/C,EAAEQ,UAEFF,EAAAA,EAAAA,KAACwB,EAAAA,IAAc,aAM3B,C,uIC9GaC,EAActD,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0kBAOlB,SAAAK,GAAK,OACvBA,EAAMgD,aACFhD,EAAMC,MAAMC,SAAS+C,wBACrBjD,EAAMC,MAAMC,SAASgD,yBAAyB,IAE3C,SAAAlD,GAAK,OACZA,EAAMgD,aAAehD,EAAMC,MAAMC,SAASiD,mBAAqB,SAAS,I,SCT/DC,EAAmB,WAC9B,IAAIC,GAAWC,EAAAA,EAAAA,MAET7C,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzB4C,EAAgB9C,EAAW+C,SAAS,SACpCC,EAAchD,EAAW+C,SAAS,OAElC5C,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BN,GAAWC,EAAAA,EAAAA,MAajB,OACEc,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACyB,EAAW,CACVR,KAAK,SACLS,aAAcO,EACdf,QAjBkB,WACxBjC,GAASmD,EAAAA,EAAAA,IAAc,UACvBL,EAAS,mBAADM,OAAoB/C,GAAe,CAAC,EAC9C,EAcmCY,SAC5B,WAGDF,EAAAA,EAAAA,KAACyB,EAAW,CACVR,KAAK,SACLS,aAAcS,EACdjB,QAnBgB,WACtBjC,GAASmD,EAAAA,EAAAA,IAAc,QAEvBL,EAAS,iBAADM,OAAkB/C,GAAe,CAAC,EAC5C,EAeiCY,SAC1B,YAMT,E,UC7CaoC,EAAgBnE,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+ECGxB,SAASkE,IACtB,OACEpC,EAAAA,EAAAA,MAACmC,EAAa,CAAApC,SAAA,EACZF,EAAAA,EAAAA,KAAChB,EAAAA,EAAe,KAChBgB,EAAAA,EAAAA,KAAC8B,EAAgB,MAGvB,C,gBCVaU,EAAcrE,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gC,UCUtB,SAASoE,IACtB,IAAMV,GAAWC,EAAAA,EAAAA,MACXU,GAAatD,EAAAA,EAAAA,IAAYG,EAAAA,IACzBC,GAAeJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC3BN,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAIzBK,EAAsB,UAAfP,EAAyBuD,EAAalD,EAMnD,OAJAK,EAAAA,EAAAA,YAAU,WACRkC,EAAS,GAADM,OAAIlD,EAAU,KAAAkD,OAAI3C,GAAQ,CAAC,EACrC,GAAG,CAACA,EAAMqC,EAAU5C,KAGlBa,EAAAA,EAAAA,KAAC2C,EAAAA,EAAS,CAAAzC,UACRC,EAAAA,EAAAA,MAACqC,EAAW,CAAAtC,SAAA,EACVF,EAAAA,EAAAA,KAACuC,EAAe,KAChBvC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAM,QAIf,C","sources":["components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/Calendar/CalendarToolBar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/Calendar/CalendarToolBar/CalendarToolBar.styled.jsx","components/Calendar/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n//// Date picker\n\nexport const DatePickerWrapper = styled.div`\n  font-family: 'Inter', sans-serif;\n  margin-right: 8px;\n  & .react-datepicker__today-button {\n    border: none;\n    background: none;\n  }\n  & input {\n    display: inline;\n\n    text-align: center;\n    padding: 0;\n    background-color: #3e85f3;\n    outline: none;\n    border: none;\n    border-radius: 8px;\n    height: 30px;\n\n    width: 140px; ///\n\n    color: white;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: calc(14 / 18);\n  }\n  & .react-datepicker {\n    background-color: #3e85f3;\n    color: white;\n    border-radius: 16px;\n  }\n  & .react-datepicker__header {\n    background-color: #3e85f3;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__triangle::after,\n  & .react-datepicker__triangle::before {\n    background-color: #3e85f3;\n    display: none;\n  }\n  & .react-datepicker__current-month {\n    font-size: 16px;\n    margin-bottom: 18px;\n  }\n  & .react-datepicker__day-name,\n  & .react-datepicker__day.react-datepicker__day--outside-month {\n    color: rgba(255, 255, 255, 0.5);\n  }\n\n  & .react-datepicker__navigation-icon::before {\n    border-color: white;\n  }\n  & .react-datepicker__current-month {\n    color: white;\n  }\n  & .react-datepicker__week:last-of-type {\n    margin-bottom: 0;\n  }\n  & .react-datepicker__week:not(:last-of-type) {\n    margin-bottom: 7px;\n  }\n  & .react-datepicker__day.react-datepicker__day--selected {\n    border-radius: 50%;\n    color: #3e85f3;\n\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  & .react-datepicker__day.react-datepicker__day--today {\n    background-color: #fff;\n    border-radius: 50%;\n    color: #3e85f3;\n    font-weight: 500;\n  }\n  & .react-datepicker__day--keyboard-selected {\n    border: none;\n    background: none;\n  }\n  & .react-datepicker__day {\n    color: inherit;\n    font-size: 14px;\n  }\n`;\nexport const ControlWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n`;\n\nexport const Controls = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 30px;\n  background-color: ${props => props.theme.variable.CalendarLinkColor};\n  border: ${props => props.theme.variable.borderColorWeekCalendar};\n  color: ${props => props.theme.variable.calendarTextColor};\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right-width: 0.5px;\n  }\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left-width: 0.5px;\n  }\n`;\n","import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addDays,\n  addMonths,\n  format,\n  parse,\n  subDays,\n  subMonths,\n} from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport {\n  ControlWrapper,\n  DatePickerWrapper,\n} from 'components/Calendar/CalendarToolBar/PeriodPaginator/PeriodPaginator.styled';\nimport { Controls } from './PeriodPaginator.styled';\n\nimport {\n  selectActiveDate,\n  selectPeriodType,\n  selectSelectedDate,\n} from 'redux/date/selectors';\nimport {\n  useEffect,\n  // useRef\n} from 'react';\nimport { fetchTasks } from 'redux/tasks/tasksOperations';\nimport { setActiveDate, setSelectedDate } from 'redux/date/dateSlice';\n// import { useParams } from 'react-router-dom';\n\nexport const PeriodPaginator = () => {\n  const dispatch = useDispatch();\n\n  const periodType = useSelector(selectPeriodType);\n  const currentDate = useSelector(selectActiveDate);\n  const selectedDate = useSelector(selectSelectedDate);\n\n  // const prevDateRef = useRef(parse(currentDate, 'yyyy-MM-dd', new Date()));\n  // console.log(prevDateRef, 'prevDateRef-11');\n  const date =\n    periodType === 'month'\n      ? parse(currentDate, 'yyyy-MM-dd', new Date())\n      : parse(selectedDate, 'yyyy-MM-dd', new Date());\n\n  useEffect(() => {\n    // if (format(date, 'yyyy-MM') !== format(prevDateRef.current, 'yyyy-MM')) {\n    dispatch(fetchTasks(format(date, 'yyyy-MM')));\n    // }\n  }, [dispatch, date, currentDate]);\n\n  // useEffect(() => {\n  //   prevDateRef.current = parse(currentDate, 'yyyy-MM-dd', new Date());\n  // }, [currentDate]);\n\n  return (\n    <>\n      <ControlWrapper>\n        <DatePickerWrapper>\n          <ReactDatePicker\n            selected={date}\n            onChange={value => {\n              dispatch(setSelectedDate(format(value, 'yyyy-MM-dd')));\n              dispatch(setActiveDate(format(value, 'yyyy-MM-dd')));\n            }}\n            calendarStartDay={1}\n            // showMonthYearPicker\n            dateFormat={periodType === 'month' ? 'MMMM yyyy' : 'dd MMMM yyyy'}\n            closeOnScroll={true}\n            formatWeekDay={nameOfDay => nameOfDay.substr(0, 1)}\n            // minDate={'02-01-2020'}\n            todayButton=\"Today\"\n          />\n        </DatePickerWrapper>\n        <div>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                dispatch(\n                  setActiveDate(format(subMonths(date, 1), 'yyyy-MM-dd'))\n                );\n              } else {\n                dispatch(\n                  setSelectedDate(format(subDays(date, 1), 'yyyy-MM-dd'))\n                );\n              }\n            }}\n          >\n            <AiOutlineLeft />\n          </Controls>\n          <Controls\n            type=\"button\"\n            onClick={() => {\n              if (periodType === 'month') {\n                dispatch(\n                  setActiveDate(format(addMonths(date, 1), 'yyyy-MM-dd'))\n                );\n              } else {\n                dispatch(\n                  setSelectedDate(format(addDays(date, 1), 'yyyy-MM-dd'))\n                );\n              }\n            }}\n          >\n            <AiOutlineRight />\n          </Controls>\n        </div>\n      </ControlWrapper>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const MonthToggle = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  //\n  background-color: ${props =>\n    props.$currenttype\n      ? props.theme.variable.activeCalendarLinkColor\n      : props.theme.variable.inactiveCalendarLinkColor};\n  border: none;\n  color: ${props =>\n    props.$currenttype ? props.theme.variable.activeTextColorBtn : '#3e85f3'};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(14 / 18);\n  margin-bottom: 24px;\n\n  &:first-of-type {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 143, 0.2);\n  }\n\n  &:last-of-type {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    border-left: 1px solid rgba(62, 133, 143, 0.2);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setPeriodType } from 'redux/date/dateSlice';\nimport { selectActiveDate, selectPeriodType } from 'redux/date/selectors';\nimport { MonthToggle } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = () => {\n  let navigate = useNavigate();\n\n  const periodType = useSelector(selectPeriodType);\n  const isMonthActive = periodType.includes('month');\n  const isDayActive = periodType.includes('day');\n\n  const currentDate = useSelector(selectActiveDate);\n  const dispatch = useDispatch();\n\n  const handleToggleMonth = () => {\n    dispatch(setPeriodType('month'));\n    navigate(`/calendar/month/${currentDate}`, {});\n  };\n\n  const handleToggleDay = () => {\n    dispatch(setPeriodType('day'));\n\n    navigate(`/calendar/day/${currentDate}`, {});\n  };\n\n  return (\n    <>\n      <div>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={isMonthActive}\n          onClick={handleToggleMonth}\n        >\n          Month\n        </MonthToggle>\n        <MonthToggle\n          type=\"button\"\n          $currenttype={isDayActive}\n          onClick={handleToggleDay}\n        >\n          Day\n        </MonthToggle>\n      </div>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const PeriodWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`;\n","// import { useState } from 'react';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodWrapper } from './CalendarToolBar.styled';\n\nexport default function CalendarToolBar() {\n  return (\n    <PeriodWrapper>\n      <PeriodPaginator />\n      <PeriodTypeSelect />\n    </PeriodWrapper>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  padding-top: 64px;\n`;\n","import CalendarToolBar from 'components/Calendar/CalendarToolBar/CalendarToolBar';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport {\n  selectActiveDate,\n  selectPeriodType,\n  selectSelectedDate,\n} from 'redux/date/selectors';\nimport { PageWrapper } from './CalendarPage.styled';\nimport { Container } from 'styles/container';\n\nexport default function CalendarPage() {\n  const navigate = useNavigate();\n  const currentDay = useSelector(selectActiveDate);\n  const selectedDate = useSelector(selectSelectedDate);\n  const periodType = useSelector(selectPeriodType);\n\n  // console.log(currentDay, 'calendar redirect date');\n\n  const date = periodType === 'month' ? currentDay : selectedDate;\n\n  useEffect(() => {\n    navigate(`${periodType}/${date}`, {});\n  }, [date, navigate, periodType]);\n\n  return (\n    <Container>\n      <PageWrapper>\n        <CalendarToolBar />\n        <Outlet />\n      </PageWrapper>\n    </Container>\n  );\n}\n"],"names":["DatePickerWrapper","styled","_templateObject","_taggedTemplateLiteral","ControlWrapper","_templateObject2","Controls","_templateObject3","props","theme","variable","CalendarLinkColor","borderColorWeekCalendar","calendarTextColor","PeriodPaginator","dispatch","useDispatch","periodType","useSelector","selectPeriodType","currentDate","selectActiveDate","selectedDate","selectSelectedDate","date","parse","Date","useEffect","fetchTasks","format","_jsx","_Fragment","children","_jsxs","ReactDatePicker","selected","onChange","value","setSelectedDate","setActiveDate","calendarStartDay","dateFormat","closeOnScroll","formatWeekDay","nameOfDay","substr","todayButton","type","onClick","subMonths","subDays","AiOutlineLeft","addMonths","addDays","AiOutlineRight","MonthToggle","$currenttype","activeCalendarLinkColor","inactiveCalendarLinkColor","activeTextColorBtn","PeriodTypeSelect","navigate","useNavigate","isMonthActive","includes","isDayActive","setPeriodType","concat","PeriodWrapper","CalendarToolBar","PageWrapper","CalendarPage","currentDay","Container","Outlet"],"sourceRoot":""}